
/**
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 **/

/**
 * @file   Viewer3DFactory.ih
 * @author Aline Martin <aline.martin@insa-lyon.fr>
 * @date   mardi 2 juillet 2013
 *
 * @brief
 *
 * Implementation of inline methods defined in Viewer3DFactory.h
 *
 * This file is part of the DGtal library.
 */

//TODO remove iostream
#include <iostream>
#include <string>


#include "DGtal/helpers/StdDefs.h"
#include "DGtal/images/ImageHelper.h"
#include "DGtal/io/Display3DFactory.h"


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline methods                                          //


///////////////////////////////////////////////////////////////////////////////
// Implementation of inline functions and external operators                 //


template < typename Space, typename KSpace>
inline
void DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                                   const DGtal::CameraPosition & cp )
{
  viewer.setCameraPosition(cp.eyex, cp.eyey, cp.eyez);
}

template < typename Space, typename KSpace>
inline
void DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                                   const DGtal::CameraDirection & cd )
{
  viewer.setCameraDirection(cd.dirx, cd.diry, cd.dirz);
}

template < typename Space, typename KSpace>
inline
void DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::CameraUpVector & cuv )
{

  viewer.setCameraUpVector(cuv.upx, cuv.upy, cuv.upz);
}

template < typename Space, typename KSpace>
inline
void DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                                   const DGtal::CameraZNearFar & cz )
{
  viewer.setNearFar(cz.ZNear, cz.ZFar);
}



// AddTextureImage3DWithFunctor
template<typename TImageType, typename TFunctor, typename Space, typename KSpace>
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::AddTextureImage3DWithFunctor<TImageType, TFunctor, Space, KSpace> & anAddGS3D )
{
  drawImage3D(viewer, *anAddGS3D.my3DImage, anAddGS3D.myFunctor, anAddGS3D.myMode);
}
// AddTextureImage3DWithFunctor

// AddTextureImage2DWithFunctor
template<typename TImageType, typename TFunctor, typename Space, typename KSpace>
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::AddTextureImage2DWithFunctor<TImageType, TFunctor, Space, KSpace> & anAddGS2D )
{
  drawImage2D(viewer, *anAddGS2D.my2DImage, anAddGS2D.myFunctor, anAddGS2D.myMode);
}
// AddTextureImage2DWithFunctor

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::UpdateImagePosition<Space, KSpace> & anUpdate)
{
  viewer.updateOrientationTextureImage(anUpdate.myIndex, anUpdate.myPosXBottomLeft, anUpdate.myPosYBottomLeft,
                                        anUpdate.myPosZBottomLeft, anUpdate.myNewDirection);
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::UpdateLastImagePosition<Space, KSpace> & anUpdate )
{
  unsigned int index = viewer.getCurrentGLImageNumber()-1;
  viewer.updateOrientationTextureImage(index, anUpdate.myPosXBottomLeft, anUpdate.myPosYBottomLeft,
                                        anUpdate.myPosZBottomLeft, anUpdate.myNewDirection);
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> &viewer, const DGtal::Update2DDomainPosition<Space, KSpace> & anUpdate)
{
  viewer.updateAn2DDomainOrientation(anUpdate.myIndex, anUpdate.myPosXBottomLeft, anUpdate.myPosYBottomLeft,
                                      anUpdate.myPosZBottomLeft, anUpdate.myNewDirection);
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> &viewer, const DGtal::Translate2DDomain & anTranslation)
{
  viewer.translateAn2DDomain(anTranslation.myIndex, anTranslation.myTranslateX, anTranslation.myTranslateY,
                              anTranslation.myTranslateZ);
}

template<typename TImageType, typename TFunctor, typename Space, typename KSpace>
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::UpdateImageData<TImageType, TFunctor> & anUpdate)
{
  viewer.updateTextureImage(anUpdate.myIndex, *(anUpdate.myImage), anUpdate.myFunctor, anUpdate.myTranslateX,
                             anUpdate.myTranslateY, anUpdate.myTranslateZ);
}

template < typename TImageType3D, typename TFunctor, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawImage3D( Viewer3D<Space, KSpace> & viewer, const TImageType3D & anImage3D, const TFunctor & aFunctor,
                                     typename Viewer3D<Space, KSpace>::TextureMode aTextureMode)
{
  std::string mode = viewer.getMode( anImage3D.className() );
  ASSERT( (mode=="BoundingBox" || mode=="InterGrid" || mode=="Grid"|| mode=="") ||
          ("DGtal::Viewer3DFactory::draw( DViewer3D<Space, KSpace> & viewer,const TImageType3D & anImage ): Unknown mode "+mode)=="");

  typedef TImageType3D Image3D;

  DGtal::Projector<DGtal::Z2i::Space> invFunctorY; invFunctorY.initRemoveOneDim(1);
  DGtal::Z2i::Domain domainY(invFunctorY(anImage3D.domain().lowerBound()),
                             invFunctorY(anImage3D.domain().upperBound()));
  DGtal::Projector<DGtal::Z2i::Space> invFunctorZ; invFunctorZ.initRemoveOneDim(2);
  DGtal::Z2i::Domain domainZ(invFunctorZ(anImage3D.domain().lowerBound()),
                             invFunctorZ(anImage3D.domain().upperBound()));
  DGtal::Projector<DGtal::Z2i::Space> invFunctorX; invFunctorX.initRemoveOneDim(0);
  DGtal::Z2i::Domain domainX(invFunctorX(anImage3D.domain().lowerBound()),
                             invFunctorX(anImage3D.domain().upperBound()));



  typedef DGtal::ConstImageAdapter<Image3D, DGtal::Z2i::Domain, DGtal::Projector< Z3i::Space>,
      typename Image3D::Value, DGtal::DefaultFunctor > SliceImageAdapter;
  DGtal::DefaultFunctor idV;
  DGtal::Projector<DGtal::Z3i::Space> aSliceFunctorY((int)(anImage3D.domain().lowerBound()[1]));
  aSliceFunctorY.initAddOneDim(1);
  SliceImageAdapter sliceImageY(anImage3D, domainY, aSliceFunctorY, idV);

  viewer<< SetMode3D( sliceImageY.className(), mode );
  viewer << DGtal::AddTextureImage2DWithFunctor<SliceImageAdapter, TFunctor,Space, KSpace> (sliceImageY, aFunctor, aTextureMode );

  viewer << DGtal::UpdateLastImagePosition<Space, KSpace>( Viewer3D<Space, KSpace>::yDirection,
                                                    anImage3D.domain().lowerBound()[0],
      anImage3D.domain().lowerBound()[1]-0.5,
      anImage3D.domain().lowerBound()[2]);

  DGtal::Projector<DGtal::Z3i::Space> aSliceFunctorX((int)(anImage3D.domain().lowerBound()[0]));
  aSliceFunctorX.initAddOneDim(0);
  SliceImageAdapter sliceImageX(anImage3D, domainX, aSliceFunctorX, idV);
  viewer << DGtal::AddTextureImage2DWithFunctor<SliceImageAdapter, TFunctor , Space, KSpace> (sliceImageX, aFunctor, aTextureMode );
  viewer << DGtal::UpdateLastImagePosition<Space, KSpace> ( Viewer3D<Space, KSpace>::xDirection,
                                                     anImage3D.domain().lowerBound()[0] -0.5,
      anImage3D.domain().lowerBound()[1],
      anImage3D.domain().lowerBound()[2]);

  DGtal::Projector<DGtal::Z3i::Space> aSliceFunctorZ((int)(anImage3D.domain().lowerBound()[2]));
  aSliceFunctorZ.initAddOneDim(2);
  SliceImageAdapter sliceImageZ(anImage3D, domainZ, aSliceFunctorZ, idV);
  viewer << DGtal::AddTextureImage2DWithFunctor<SliceImageAdapter, TFunctor , Space, KSpace>(sliceImageZ, aFunctor, aTextureMode );
  viewer << DGtal::UpdateLastImagePosition<Space, KSpace> ( Viewer3D<Space, KSpace>::zDirection,
                                                     anImage3D.domain().lowerBound()[0],
      anImage3D.domain().lowerBound()[1],
      anImage3D.domain().lowerBound()[2]-0.5);


  // other symetrics faces
  DGtal::Projector<DGtal::Z3i::Space> aSliceFunctorYl((int)(anImage3D.domain().upperBound()[1]));
  aSliceFunctorYl.initAddOneDim(1);
  SliceImageAdapter sliceImageYl(anImage3D, domainY, aSliceFunctorYl, idV);
  viewer << DGtal::AddTextureImage2DWithFunctor<SliceImageAdapter, TFunctor , Space, KSpace>(sliceImageYl, aFunctor , aTextureMode);
  viewer << DGtal::UpdateLastImagePosition<Space, KSpace> ( Viewer3D<Space, KSpace>::yDirection,
                                                     anImage3D.domain().lowerBound()[0],
      0.5+anImage3D.domain().upperBound()[1],
      anImage3D.domain().lowerBound()[2]);


  DGtal::Projector<DGtal::Z3i::Space> aSliceFunctorXl((int)(anImage3D.domain().upperBound()[0]));
  aSliceFunctorXl.initAddOneDim(0);
  SliceImageAdapter sliceImageXl(anImage3D, domainX, aSliceFunctorXl, idV);
  viewer << DGtal::AddTextureImage2DWithFunctor<SliceImageAdapter, TFunctor, Space, KSpace>(sliceImageXl, aFunctor, aTextureMode );
  viewer << DGtal::UpdateLastImagePosition<Space, KSpace> ( Viewer3D<Space, KSpace>::xDirection,
                                                     0.5+anImage3D.domain().upperBound()[0],
      anImage3D.domain().lowerBound()[1],
      anImage3D.domain().lowerBound()[2] );

  DGtal::Projector<DGtal::Z3i::Space> aSliceFunctorZl((int)(anImage3D.domain().upperBound()[2]));
  aSliceFunctorZl.initAddOneDim(2);
  SliceImageAdapter sliceImageZl(anImage3D, domainZ, aSliceFunctorZl, idV);
  viewer << DGtal::AddTextureImage2DWithFunctor<SliceImageAdapter, TFunctor, Space, KSpace>(sliceImageZl, aFunctor , aTextureMode);
  viewer << DGtal::UpdateLastImagePosition<Space, KSpace>( Viewer3D<Space, KSpace>::zDirection,
                                                    anImage3D.domain().lowerBound()[0],
      anImage3D.domain().lowerBound()[1],
      0.5+ anImage3D.domain().upperBound()[2] );
}

// ImageContainerBySTLVector  (2D)
template <typename TValue, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  ImageContainerBySTLVector<DGtal::Z2i::Domain, TValue>  & anImage )
{
  drawImage2D(viewer, anImage, CastFunctor<unsigned int> (), anImage.myMode );
}
// ImageContainerBySTLVector  (2D)


// ImageContainerBySTLMap  (2D)
template <typename TValue, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  ImageContainerBySTLMap<DGtal::Z2i::Domain, TValue>  & anImage )
{
 drawImage2D(viewer, anImage, CastFunctor<unsigned int> (), anImage.myMode);
}
// ImageContainerBySTLMap  (2D)


// ImageContainerBySTLVector  (3D)
template <typename TValue, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const ImageContainerBySTLVector<DGtal::Z3i::Domain, TValue>  & anImage3D )
{
  drawImage3D(viewer, anImage3D, CastFunctor<unsigned int> (), Viewer3D<Space,KSpace>::GrayScaleMode);
}
// ImageContainerBySTLVector (3D)

// ImageContainerBySTLMap  (3D)
template <typename TValue, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const ImageContainerBySTLMap<DGtal::Z3i::Domain, TValue>  & anImage3D )
{
  drawImage3D(viewer, anImage3D, CastFunctor<unsigned int> (), anImage3D.myMode);
}
// ImageContainerBySTLMap  (3D)


// ConstImageAdapter  (2D)
template <typename TImageContainer, typename TFunctorD, typename TNewValue, typename TFunctorValue, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  ConstImageAdapter<TImageContainer, DGtal::Z2i::Domain, TFunctorD, TNewValue, TFunctorValue>  & anImage )
{
  drawImage2D(viewer, anImage, CastFunctor<unsigned int> (), Viewer3D<Space,KSpace>::GrayScaleMode );
}
// ConstImageAdapter  (2D)

// ImageAdapter  (2D)
template <typename TImageContainer, typename TFunctorD, typename TNewValue, typename TFunctorValue, typename TFunctorValueVm1, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  ImageAdapter<TImageContainer, DGtal::Z2i::Domain, TFunctorD, TNewValue, TFunctorValue, TFunctorValueVm1>  & anImage )
{
  drawImage2D(viewer, anImage, CastFunctor<unsigned int> (), anImage.myMode);
}
// ImageAdapter  (2D)


// ConstImageAdapter  (3D)
template <typename TImageContainer, typename TFunctorD, typename TNewValue, typename TFunctorValue, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  ConstImageAdapter<TImageContainer, DGtal::Z3i::Domain, TFunctorD,
                              TNewValue, TFunctorValue>  & anImage )
{
  drawImage3D(viewer, anImage, CastFunctor<unsigned int> (), anImage.myMode);
}
// ConstImageAdapter  (3D)

// ImageAdapter  (3D)
template <typename TImageContainer, typename TFunctorD, typename TNewValue, typename TFunctorValue, typename TFunctorValueVm1, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  ImageAdapter<TImageContainer, DGtal::Z3i::Domain, TFunctorD,
                              TNewValue, TFunctorValue, TFunctorValueVm1>  & anImage )
{
  drawImage3D(viewer, anImage, CastFunctor<unsigned int> (), anImage.myMode);
}
// ImageAdapter  (3D)

//HyperRectDomain
template<typename TSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain )
{
  std::string mode = viewer.getMode( aDomain.className() );

  std::cout << "mode:" << mode << ":fin" << std::endl;

  ASSERT((mode=="" || mode=="Grid" || mode=="Paving"|| mode=="PavingPoints"|| mode=="PavingGrids" ||
          mode=="BoundingBox")||
         ("DGtal::Viewer3DFactory::draw( Viewer3DD<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain ): Unknown mode "+mode)=="");

  if ( mode == "BoundingBox" )
  {
    viewer.createNewLineList(aDomain.className());
    drawAsBoundingBox( viewer, aDomain );
  }else if( ( mode == "" ) || (mode == "Grid"))
  {
    viewer.createNewLineList(aDomain.className());
    drawAsGrid( viewer, aDomain );
  }
  else if ( mode == "Paving" )
  {
    viewer.createNewCubeList( aDomain.className());
  }

  ASSERT((TSpace::dimension==3)|| (TSpace::dimension==2));
  ASSERT((TSpace::dimension!=3) || (mode=="" || mode=="Grid" || mode=="Paving"|| mode=="PavingPoints"|| mode=="PavingGrids" ||
                                    mode=="BoundingBox")||
         ("DGtal::Display3DFactory::draw( Display3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain ): Unknown mode "+mode)=="");
  ASSERT((TSpace::dimension!=2) || (mode=="" || mode=="BoundingBox" || mode=="InterGrid"|| mode=="Grid") ||
         ("DGtal::Display3DFactory::draw( Display3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain ): Unknown mode "+mode)=="");

  if(TSpace::dimension == 2)
  {
    if (mode=="")
      mode="BoundingBox";
    viewer.addImage2DDomainD3D(aDomain, mode);
  }else if ( mode == "BoundingBox" )
  {
    viewer.createNewLineList();
    drawAsBoundingBox( viewer, aDomain );
  }else if(( mode == "" ) || (mode == "Grid"))
  {
    viewer.createNewLineList();
    drawAsGrid( viewer, aDomain );
  } else if ( mode == "Paving" )
  {
    viewer.createNewCubeList();
    drawAsPaving( viewer, aDomain );
  } else if ( mode == "PavingPoints" )
  {
    viewer.createNewBallList(aDomain.className());
    drawAsPavingBalls( viewer, aDomain );
  }else if ( mode == "PavingGrids" )
  {
    viewer.createNewLineList(aDomain.className());
    viewer.createNewCubeList( aDomain.className());
    drawAsGrid( viewer, aDomain );
    drawAsPaving( viewer, aDomain );
  }
}
//end HyperRectDomain

//----------------------------------------------------------------------------------------------
// heritage of methods


// SphericalAccumulator
template <typename TVector, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  DGtal::SphericalAccumulator<TVector> & accumulator,
                              const typename DGtal::SphericalAccumulator<TVector>::RealVector & shift,
                              const double radius)
{
  DGtal::Display3DFactory::draw ( viewer, accumulator, shift, radius);
}
// SphericalAccumulator

// Mesh
template <typename TPoint, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsFaces( Viewer3D<Space, KSpace> & viewer,  const DGtal::Mesh<TPoint> & aMesh )
{
  DGtal::Display3DFactory::drawAsFaces( viewer, aMesh);
}

template <typename TPoint, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const  DGtal::Mesh<TPoint> & aMesh )
{
  DGtal::Display3DFactory::draw (viewer, aMesh);
}
// Mesh

// ArithmeticalDSS3d
template <typename TIterator, typename TInteger, int connectivity>
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::ArithmeticalDSS3d<TIterator,TInteger,connectivity> & arithm )
{
  return DGtal::Display3DFactory::defaultStyle(str, arithm);
}

template <typename TIterator, typename TInteger, int connectivity, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsBalls( Viewer3D<Space, KSpace> & viewer, const DGtal::ArithmeticalDSS3d<TIterator,TInteger,connectivity> & arithm )
{
  DGtal::Display3DFactory::drawAsBalls(viewer, arithm);
}

template <typename TIterator, typename TInteger, int connectivity, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsBoundingBox( Viewer3D<Space, KSpace> & viewer, const DGtal::ArithmeticalDSS3d<TIterator,TInteger,connectivity> & arithm )
{
  DGtal::Display3DFactory::drawAsBoundingBox(viewer, arithm);
}

template <typename TIterator, typename TInteger, int connectivity, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::ArithmeticalDSS3d<TIterator,TInteger,connectivity> & arithm )
{
  DGtal::Display3DFactory::draw(viewer , arithm);
}
// ArithmeticalDSS3d


// DigitalSetBySTLSet
template<typename Domain>
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::DigitalSetBySTLSet<Domain> & aSet )
{
  return DGtal::Display3DFactory::defaultStyle(str, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPavingTransparent( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLSet<Domain> & aSet )
{
  DGtal::Display3DFactory::drawAsPavingTransparent(viewer, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPaving( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLSet<Domain> & aSet )
{
  DGtal::Display3DFactory::drawAsPaving( viewer, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsGrid( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLSet<Domain> & aSet )
{
  DGtal::Display3DFactory::drawAsGrid(viewer, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLSet<Domain> & aSet )
{
  DGtal::Display3DFactory::draw( viewer, aSet);
}
// DigitalSetBySTLSet


// DigitalSetBySTLVector
template<typename Domain>
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::DigitalSetBySTLVector<Domain> & aSet )
{
  DGtal::Display3DFactory::defaultStyle(str, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPavingTransparent( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLVector<Domain> & aSet )
{
  DGtal::Display3DFactory::drawAsPavingTransparent( viewer, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPaving( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLVector<Domain> & aSet )
{
  DGtal::Display3DFactory::drawAsPaving( viewer, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsGrid( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLVector<Domain> & aSet )
{
  DGtal::Display3DFactory::drawAsGrid(viewer, aSet);
}

template<typename Domain, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::DigitalSetBySTLVector<Domain> & aSet )
{
  DGtal::Display3DFactory::draw( viewer, aSet);
}
// DigitalSetBySTLVector


// HyperRectDomain
template<typename TSpace>
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::HyperRectDomain<TSpace> & aDomain )
{
  DGtal::Display3DFactory::defaultStyle( str, aDomain);
}

template<typename TSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsBoundingBox( Viewer3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain )
{
  DGtal::Display3DFactory::drawAsBoundingBox( viewer, aDomain);
}

template<typename TSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsGrid( Viewer3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain )
{
  DGtal::Display3DFactory::drawAsGrid( viewer, aDomain);
}

template<typename TSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPavingBalls( Viewer3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain )
{
  DGtal::Display3DFactory::drawAsPavingBalls( viewer, aDomain);
}

template<typename TSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPaving( Viewer3D<Space, KSpace> & viewer, const DGtal::HyperRectDomain<TSpace> & aDomain )
{
  DGtal::Display3DFactory::drawAsPaving( viewer, aDomain);
}


// HyperRectDomain


// KhalimskyCell
template < DGtal::Dimension dim, typename TInteger >
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::KhalimskyCell<dim, TInteger> & aCell )
{
  DGtal::Display3DFactory::defaultStyle(str, aCell);
}

template < DGtal::Dimension dim, typename TInteger, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::KhalimskyCell<dim, TInteger> & aCell )
{
  DGtal::Display3DFactory::draw( viewer, aCell);
}
// KhalimskyCell


// Object
template <typename TDigitalTopology, typename TDigitalSet>
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::Object<TDigitalTopology, TDigitalSet> & anObject )
{
  DGtal::Display3DFactory::defaultStyle( str, anObject);
}

template <typename TDigitalTopology, typename TDigitalSet, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawWithAdjacencies( Viewer3D<Space, KSpace> & viewer, const DGtal::Object<TDigitalTopology, TDigitalSet> & anObject )
{
  DGtal::Display3DFactory::drawWithAdjacencies( viewer, anObject);
}

template <typename TDigitalTopology, typename TDigitalSet, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::Object<TDigitalTopology, TDigitalSet> & anObject )
{
  DGtal::Display3DFactory::draw( viewer, anObject);
}
// Object


// PointVector
template< DGtal::Dimension dim, typename TComponent>
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::PointVector<dim,TComponent> & aPoint )
{
  DGtal::Display3DFactory::defaultStyle( str, aPoint);
}

template< DGtal::Dimension dim, typename TComponent, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsGrid( Viewer3D<Space, KSpace> & viewer, const DGtal::PointVector<dim,TComponent> & aPoint )
{
  DGtal::Display3DFactory::drawAsGrid( viewer, aPoint);
}

template< DGtal::Dimension dim, typename TComponent, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPaving( Viewer3D<Space, KSpace> & viewer, const DGtal::PointVector<dim,TComponent> & aPoint )
{
  DGtal::Display3DFactory::drawAsPaving( viewer, aPoint);
}

template< DGtal::Dimension dim, typename TComponent, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawAsPavingWired( Viewer3D<Space, KSpace> & viewer, const DGtal::PointVector<dim,TComponent> & aPoint )
{
  DGtal::Display3DFactory::drawAsPavingWired( viewer, aPoint);
}

template< DGtal::Dimension dim, typename TComponent, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::PointVector<dim,TComponent> & aPoint )
{
  DGtal::Display3DFactory::draw( viewer, aPoint);
}

template< DGtal::Dimension dim, typename TComponent, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::PointVector<dim,TComponent> & aPoint, const DGtal::PointVector<dim,TComponent> & aPoint2 )
{
  DGtal::Display3DFactory::draw( viewer, aPoint, aPoint2);
}
// PointVector


// SignedKhalimskyCell
template< DGtal::Dimension dim, typename TInteger >
inline
DGtal::DrawableWithViewer3D *
DGtal::Viewer3DFactory::defaultStyle( std::string str, const DGtal::SignedKhalimskyCell<dim, TInteger> & aSCell )
{
  DGtal::Display3DFactory::defaultStyle( str, aSCell);
}

template< DGtal::Dimension dim, typename TInteger , typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::SignedKhalimskyCell<dim, TInteger> & aSCell )
{
  DGtal::Display3DFactory::draw( viewer, aSCell);
}
// SignedKhalimskyCell

// GridCurve
template< typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::GridCurve<TKSpace> & aGrid )
{
  DGtal::Display3DFactory::draw( viewer, aGrid);
}
// GridCurve

// SCellsRange
template < typename TIterator, typename TSCell, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( DGtal::Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, DGtal::DefaultFunctor, TSCell> & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// SCellsRange

// PointsRange
template <typename TIterator, typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, SCellToPoint<TKSpace>, typename TKSpace::Point> & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// PointsRange

// MidPointsRange
template <typename TIterator, typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, SCellToMidPoint<TKSpace>, typename TKSpace::Space::RealPoint> & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// MidPointsRange

// ArrowsRange
template <typename TIterator, typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, SCellToArrow<TKSpace>, std::pair<typename TKSpace::Point, typename TKSpace::Vector > > & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// ArrowsRange

// InnerPointsRange
template <typename TIterator, typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, SCellToInnerPoint<TKSpace>, typename TKSpace::Point> & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// InnerPointsRange

// OuterPointsRange
template <typename TIterator, typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, SCellToOuterPoint<TKSpace>, typename TKSpace::Point> & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// OuterPointsRange

// IncidentPointsRange
template <typename TIterator, typename TKSpace, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer,
                              const DGtal::ConstRangeAdapter<TIterator, SCellToIncidentPoints<TKSpace>,std::pair<typename TKSpace::Point, typename TKSpace::Point > > & aRangeAdapter )
{
  DGtal::Display3DFactory::draw( viewer, aRangeAdapter);
}
// IncidentPointsRange



template < typename TImageType2D, typename TFunctor, typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::drawImage2D( Viewer3D<Space, KSpace> & viewer, const TImageType2D & anImage, const TFunctor & aFunctor,
                                     typename Viewer3D<Space, KSpace>::TextureMode aTextureMode )
{
  std::string mode = viewer.getMode( anImage.className() );
  ASSERT( (mode=="BoundingBox" || mode=="InterGrid" || mode=="Grid"|| mode=="") ||
          ("DGtal::Display3DFactory::draw( Display3D<Space, KSpace> & viewer,const TImageType2D & anImage ): Unknown mode "+mode)=="");

  if(mode=="")
  {
    typename Viewer3D<Space, KSpace>::TextureImage aGSImage(anImage, aFunctor,Viewer3D<Space, KSpace>::zDirection, 0,0,0, aTextureMode);
    viewer.addTextureImage(aGSImage);
  }else if(mode=="BoundingBox" || mode == "InterGrid" || mode == "Grid")
  {
    typename Viewer3D<Space, KSpace>::TextureImage aGSImage(anImage, aFunctor, Viewer3D<Space, KSpace>::zDirection, 0,0,0, aTextureMode);
    aGSImage.myDrawDomain = true;
    viewer << SetMode3D( anImage.domain().className(), mode );
    viewer << anImage.domain();
    aGSImage.myIndexDomain = viewer.getCurrentDomainNumber()-1;
    viewer.addTextureImage(aGSImage);
  }
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::SetMode3D & aMode)
{
  DGtal::Display3DFactory::draw( viewer, aMode);
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::CustomStyle3D & aStyle)
{
  DGtal::Display3DFactory::draw( viewer, aStyle);
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::CustomColors3D & aColor)
{
  DGtal::Display3DFactory::draw( viewer, aColor);
}

template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::ClippingPlane & aClipping)
{
  DGtal::Display3DFactory::draw( viewer, aClipping);
}


template< typename Space, typename KSpace>
inline
void
DGtal::Viewer3DFactory::draw( Viewer3D<Space, KSpace> & viewer, const DGtal::TransformedSurfelPrism & aTransformedSurfelPrism)
{
  DGtal::Display3DFactory::draw( viewer, aTransformedSurfelPrism);
}


// end heritage
//----------------------------------------------------------------------------------------------


//
///////////////////////////////////////////////////////////////////////////////
